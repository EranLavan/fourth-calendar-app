import { MONTHS, DAYS } from "./conts"

import { 
         CalendarHead, 
         CalendarBody, 
         HeadDay,
         StyledDay, 
         Wrapper, 
         SevenColGrid, 
         StyledEvent
} from "./styled";

import { 
        areDatesTheSame, 
        getDateObj, 
        getDaysInMonth, 
        getRandomDarkColor, 
        getSortedDays, 
        range 
    } from "./utils";
    
import { useRef, useState } from "react";

export const Calendar = ({ 
    startingDate, 
    eventsArr, 
    addEvent, 
    onDragEvents  
}) => {
    const [currentMonth, setCurrentMonth] = useState(startingDate.getMonth());
    const [currentYear, setCurrentYear] = useState(startingDate.getFullYear());
    const DAYSINAMONTH = getDaysInMonth(currentMonth, currentYear);

    const draggedElDateRef = useRef()
    const draggedElIdRef = useRef()

    const onDragStart = (id) => {
        draggedElIdRef.current = id; 
    }

    const onDragEnter = (e, date) => {
        e.preventDefault();
        draggedElDateRef.current = date
    };

    const onDragEnd = (e) => {
        e.preventDefault();

        const updatedEvents = eventsArr.map((event) => {
            if(event.id === draggedElIdRef.current) {
                event.date = draggedElDateRef.current
            }
            return event
        })
        onDragEvents(updatedEvents)
    };

    const nextMonth = () => {
        if (currentMonth < 11) {
            setCurrentMonth((prev) => prev + 1);
        } else {
            setCurrentMonth(0)
            setCurrentYear((prev) => prev + 1);
        }
    };

    const prevMonth = () => {
        if (currentMonth > 0) {
            setCurrentMonth((prev) => prev - 1);
        } else {
            setCurrentMonth(11)
            setCurrentYear((prev) => prev - 1);
        }
    };

    const onAddEvent = (date, e) => {
        if(e.currentTarget === e.target) {
            addEvent(date, getRandomDarkColor());
        }
    };

    return (
        <Wrapper>
            <CalendarHead>
                <ion-icon 
                    onClick={prevMonth} 
                    name="arrow-back-circle-outline"
                ></ion-icon>
                <p>
                    {MONTHS[currentMonth]} {currentYear}
                </p>
                <ion-icon 
                    onClick={nextMonth} 
                    name="arrow-forward-circle-outline"
                ></ion-icon>
            </CalendarHead>
            
            <SevenColGrid>
                {getSortedDays(currentMonth, currentYear).map((day) => (
                    <HeadDay>{day}</HeadDay>
                    ))}
            </SevenColGrid>

            <CalendarBody fourCol={DAYSINAMONTH === 28}>
                    {range(DAYSINAMONTH).map((day) => (
                    <StyledDay 
                        onDragEnter={ (e) =>
                            onDragEnter(e, getDateObj(day, currentMonth, currentYear))
                        }
                        onDragEnd={onDragEnd}
                        onClick={(e) => 
                            onAddEvent(getDateObj(day, currentMonth, currentYear), e)
                        }
                        onDragOver={(e) => e.preventDefault()}
                        active={areDatesTheSame(
                            new Date(), 
                            getDateObj(day, currentMonth, currentYear)
                        )}
                    >
                            <p>{day}</p>

                            {
                                eventsArr.map(
                                    (ev) => (
                                        areDatesTheSame(
                                            getDateObj(day, currentMonth, currentYear), 
                                            ev.date
                                        ) && <StyledEvent 
                                                onDragStart={() => onDragStart(ev.id)} 
                                                draggable 
                                                bgColor={ev?.color}
                                             >
                                                {ev.title}
                                                </StyledEvent>
                                            )
                                        )}
                        </StyledDay>
                    ))}
            </CalendarBody>
            
        </Wrapper>
    );
};
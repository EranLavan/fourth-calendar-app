import { useRef, useState } from "react"; // line 22

import { 
	 SevenColGrid, 
	 Wrapper, 
	 HeadDays, // previosuly HeadDay
	 DateControls, // new!
	 StyledEvent,
	 SeeMore // there were also CalendarHead, CalendarBody, StyledDay, 
	} from "./styled";
	
import { MOCKAPPS } from "./conts"; // new

import {
	datesAreOnSameDay, // prev. areDatesTheSame
	getDarkColor, // prev. getRandomDarkColor
	getDaysInMonth, // same
	getMonthYear, // new
	nextMonth, // new
	prevMonth, // new
	range, // same
	sortDays, // prev. getSortedDays
	} from "./utils";

export const Calendar = () => {
	const [currentDate, setCurrentDate] = useState[new Date(2023, 02, 12));
	const [events, setEvents] = useState(MOCKAPPS);
	const dragDateRef = useRef();
	const dragindexRef = useRef();

	const addEvent = (date, event) => {
	  if (!event.target.classList.contains("StyledEvent")) {
		const text = window.prompt("name");
		if (text) {
		  date.setHours(0);
		  date.setSeconds(0);
		  date.setMilliseconds(0);
		  setEvents((prev) => [
			...prev,
			{ date, title: text, color: getDarkColor() }
		]);
	    };
	}
    };

const drag = (index, e) => {
	dragindexRef.current = { index, target: e.target };
};

const onDragEnter = (date, e) => {
	e.preventDefault();
	dragDateRef.current = { date, target: e.target.id };
};

const drop = (ev) => {
	ev.preventDefault();

	setEvents((prev) =>
	  prev.map((ev, index) => {
	    if (index === dragindexRef.current.index) {
		ev.date = dragDateRef.current.date;
		}
		return ev;
	    })
	);
   );

    return (
        <Wrapper>
            <DateControls> //prev. <CalendarHead>
                <ion-icon 
                    onClick={() => prevMonth(currentDate, setCurrentDate)}  // prev. just {prevMonth}
                    name="arrow-back-circle-outline"
                ></ion-icon>
		{getMonthYear(currentDate)}

                <ion-icon 
                    onClick={() => nextMonth(currentDate, setCurrentDate)}
                    name="arrow-forward-circle-outline"
                ></ion-icon>
	    </DateControls>

	    <SevenColGrid
		fullheight={true}
		is28Days={getDaysInMonth(currentDate) === 28}
	    >
		{range(getDaysInMonth(currentDate)).map((day) => (
		    <div
			id={'${currentDate.getFullYear()}/${currentDate.getMonth()}/${day}'}
			onDragEnter={(e) =>
			  onDragEnter(
			    new Date(
				currentDate.getFullYear(),
				currentDate.getMonth(),
				day
			      ),
			      e
			    )
			  }

			onDragOver={(e) => e.preventDefault()}
			onDragEnd={drop}
			onClick={(e) =>
			    addEvent(
				new Date(
				  currentDate.getFullYear(),
				  currentDate.getMonth(),
				  day
				),
				e
			     )
			   }
			>
			
			<span
			    class={'nonDRAG ${
				datesAreOnSameDay(
				    new Date(),
				    new Date(
					currentDate.getFullYear(),
					currentDate.getMonth(),
					day
				      )
				   )
					? "active"
					: ""
				} ' }
			>

				{day}

			</span>

			<EventWrapper>
			  {events.map(
			    (ev, index) =>
				datesAreOnSameDay(
				  ev.date,
				  new Date(
				    currentDate.getFullYear(),
				    currentDate.getMonth(),
				    day
				)
			    ) && (
				<StyledEvent
				  onDragStart={(e) => drag(index, e)}
				  draggable
				  className="StyledEvent"
				  id={`${ev.color} $ {ev.title}`}
				  key={ev.title}
				  bgColor={ev.color}
				>
				  {ev.title}
				</StyledEvent>
			     )
			)}
			</EventWrapper>
		     </div>
		))}
	    </SevenColGrid>
	</Wrapper>
    );
  };

	const EventWrapper = ({ children }) => {
	  if (children.filter((child) => child).length)
	    return (
		<>
		    {children}
		    {children.filter((child) => child).length > 2 && (
			<SeeMore
			  onClick={(e) => {
			    e.stopPropagation();
			    console.log("clicked p");
			}}
		    >
			see more...
		    </SeeMore>
		)}
		</>
	    );
	};


